#Requires -Version 7.0
<#
.SYNOPSIS
Process markdown files for Obsidian knowledge graph integration

.NOTES
1. Requires PowerShell 7+
2. Set API key: $env:DEEPSEEK_API_KEY = 'your-api-key'
3. Run in directory with target markdown files
#>

# Configuration Constants
$DEBUG_CONFIG = @{
    LogRequests     = $true
    SaveJsonDumps   = $true
    ShowFullErrors  = $true
}

$SCHEDULE_CONFIG = @{
    StartDelayHours = 0
    TimeoutHours    = 8
    CheckInterval   = 30
    FailOnTimeout   = $true
}

# Replace API key with placeholder
$env:DEEPSEEK_API_KEY = 'your-api-key-here'
$DEEPSEEK_CONFIG = @{
    BaseURL         = "https://api.deepseek.com/v1/chat/completions"
    Model           = "deepseek-reasoner"
    SystemMessage   = "You are a scientific documentation specialist. Analyze from multiple perspectives including physical mechanisms, mathematical models, experimental validation, and practical applications. Maintain rigorous academic standards. Perform markup ONLY using Obsidian backlinks without modifying original content."
    Temperature     = 0.5
    MaxTokens       = 8192
    JsonDepth       = 10
    LineWrap        = 80
    FileCheckRetries= 3
    HeaderPattern   = '(?im)^#{1,6}\s+'
    MaxEmptyLines   = 3
    MaxRetries      = 5
    RetryDelay      = 5
}

[System.Net.ServicePointManager]::SecurityProtocol = @(
    [System.Net.SecurityProtocolType]::Tls12,
    [System.Net.SecurityProtocolType]::Tls13
)

function Get-ValidMarkdownFiles {
    [CmdletBinding()]
    param()
    
    try {
        $allFiles = Get-ChildItem -Path . -Filter *.md -File -ErrorAction Stop
        $validFiles = [System.Collections.Generic.List[System.IO.FileInfo]]::new()

        foreach ($file in $allFiles) {
            try {
                $content = Get-Content -Path $file.FullName -Raw -Encoding UTF8 -ErrorAction Stop
                
                if ($content -match "# Generated by DeepSeek Reasoner") {
                    Write-Warning "Skipping processed file: $($file.Name)"
                    continue
                }

                if (-not ($content -match $DEEPSEEK_CONFIG.HeaderPattern)) {
                    Write-Warning "Skipping $($file.Name) - no valid header found"
                    continue
                }

                $validFiles.Add($file)
            }
            catch [System.IO.IOException] {
                Write-Warning "File access error: $($file.Name)"
            }
        }
        return $validFiles
    }
    catch {
        Write-Error "Directory scan failed: $_"
        exit 1
    }
}

function Test-DeepseekConnection {
    [CmdletBinding()]
    param()

    try {
        $testBody = @{
            model = $DEEPSEEK_CONFIG.Model
            messages = @(@{ role = "user"; content = "Connection test" })
            max_tokens = 1
        }

        $response = Invoke-RestMethod -Uri $DEEPSEEK_CONFIG.BaseURL `
            -Method Post `
            -Headers @{ 
                Authorization = "Bearer $env:DEEPSEEK_API_KEY"
                "Content-Type" = "application/json"
            } `
            -Body ($testBody | ConvertTo-Json) `
            -TimeoutSec 15 `
            -ErrorAction Stop

        return $true
    }
    catch {
        Write-Host "[Network Diagnostic]"
        Write-Host "Error: $($_.Exception.Message)"
        
        try {
            Test-NetConnection -ComputerName api.deepseek.com -Port 443 | Out-Null
            return $true
        }
        catch {
            return $false
        }
    }
}

function Invoke-DeepseekRequest {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [string]$UserPrompt
    )

    $retryCount = 0
    $headers = @{
        "Content-Type"  = "application/json"
        "Authorization" = "Bearer $($env:DEEPSEEK_API_KEY)"
    }

    do {
        try {
            $structuredPrompt = @"
Completely decompose and structure the knowledge points in this MD document according to these rules:
1. Add Obsidian backlinks [[ ]] for core concepts
2. Preserve ALL original content and formatting
3. Ignore conventional names (products/companies)
4. Remove duplicate concepts
5. Maintain mathematical equations and technical terms
6. Process all marked concepts in the document

Example:
Original: "This is demonstrated by dielectric relaxation analysis"
Processed: "This is demonstrated by [[dielectric relaxation]] analysis"
"@

            $body = @{
                model       = $DEEPSEEK_CONFIG.Model
                messages    = @(
                    @{ role = "system"; content = $DEEPSEEK_CONFIG.SystemMessage }
                    @{ role = "user"; content = $structuredPrompt + "`n" + $UserPrompt }
                )
                temperature = $DEEPSEEK_CONFIG.Temperature
                max_tokens  = $DEEPSEEK_CONFIG.MaxTokens
            }

            if ($DEBUG_CONFIG.LogRequests) {
                Write-Host "[DEBUG] Request Body:`n$($body | ConvertTo-Json -Depth 3)"
            }

            $response = Invoke-RestMethod -Uri $DEEPSEEK_CONFIG.BaseURL `
                -Method Post `
                -Headers $headers `
                -Body ($body | ConvertTo-Json -Depth 5) `
                -TimeoutSec 1800 `
                -ErrorAction Stop

            if (-not $response.choices[0].message.content) {
                throw "Empty content in API response"
            }

            return $response.choices[0].message.content
        }
        catch {
            if ($retryCount -ge $DEEPSEEK_CONFIG.MaxRetries) {
                throw "API Request Failed after $retryCount attempts: $($_.Exception.Message)"
            }
            $retryCount++
            Start-Sleep -Seconds ($DEEPSEEK_CONFIG.RetryDelay * $retryCount)
        }
    } while ($true)
}

function Write-MarkdownContent {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [System.IO.FileInfo]$File,
        [Parameter(Mandatory)]
        [string]$Content
    )

    try {
        # Preserve original formatting while cleaning response
        $cleanedContent = $Content -replace '(?m)^```(markdown)?\r?\n','' `
                                   -replace '(?m)^```\r?\n',''
        
        # Maintain original line endings and encoding
        $cleanedContent = $cleanedContent -replace '\r?\n', "`r`n"
        
        Set-Content -Path $File.FullName -Value $cleanedContent -Encoding UTF8 -NoNewline
        return $true
    }
    catch {
        Write-Warning "Error processing $($File.Name): $($_.Exception.Message)"
        return $false
    }
}

# Main Execution
if (-not $env:DEEPSEEK_API_KEY) {
    Write-Error "API key required! Set with: `$env:DEEPSEEK_API_KEY = 'your-key'"
    exit 1
}

Write-Host "Running API connectivity tests..."
if (-not (Test-DeepseekConnection)) {
    Write-Error "API connection failed. Check network and API key."
    exit 1
}

$files = Get-ValidMarkdownFiles
if (-not $files) {
    Write-Host "No processable markdown files found."
    exit 0
}

foreach ($file in $files) {
    try {
        Write-Host "Processing: $($file.Name)"
        $content = Get-Content $file.FullName -Raw -Encoding UTF8
        
        # Pre-process content to ensure header validity
        if (-not ($content -match $DEEPSEEK_CONFIG.HeaderPattern)) {
            Write-Warning "Adding default header to $($file.Name)"
            $content = "# $($file.BaseName)`r`n`r`n" + $content
        }

        $responseContent = Invoke-DeepseekRequest -UserPrompt $content
        
        if ($responseContent -notmatch '\[\[.*\]\]') {
            throw "No valid backlinks detected in response"
        }

        if (Write-MarkdownContent -File $file -Content $responseContent) {
            Write-Host "Successfully processed: $($file.Name)"
        }
    }
    catch {
        Write-Error "Processing failed for $($file.Name): $($_.Exception.Message)"
    }
}
